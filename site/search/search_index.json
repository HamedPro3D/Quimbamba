{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto Final Integrante 1, Integrante 2 Estudiante de Ingenier\u00eda: Chanel Naomi Olier Watson, Codigo: 200110086 Estudiante de Ingenier\u00eda: Hamed J. Elneser Tejeda, Codigo: 200097207 Profesor: Pedro Jose D. Posada Aguilar Programaci\u00f3n Orientada a Objetos Fecha (17-11-22) Barranquilla-Colombia Repositorio de GitHub Quimbamba","title":"Presentaci\u00f3n"},{"location":"#repositorio-de-github","text":"Quimbamba","title":"Repositorio de GitHub"},{"location":"Definiciones%20y%20especificaci%C3%B3n%20de%20requerimientos/","text":"Requerimientos generales: Un solo jugador Buena jugabilidad Requerimientos funcionales: Visualizar cuando se pierde una vida Mostrar notificaci\u00f3n de perdida de vida Visualizar el men\u00fa de opciones Poder seccionar el personaje deseado para la partida. Visualizar animaci\u00f3n del personaje caminando (hacia izquierda y derecha) Ingresar al juego Salir del juego Avanzar al siguiente nivel Notificaci\u00f3n de nivel completado","title":"Definiciones y especificaci\u00f3n de requerimientos"},{"location":"Definiciones%20y%20especificaci%C3%B3n%20de%20requerimientos/#requerimientos-generales","text":"Un solo jugador Buena jugabilidad","title":"Requerimientos generales:"},{"location":"Definiciones%20y%20especificaci%C3%B3n%20de%20requerimientos/#requerimientos-funcionales","text":"Visualizar cuando se pierde una vida Mostrar notificaci\u00f3n de perdida de vida Visualizar el men\u00fa de opciones Poder seccionar el personaje deseado para la partida. Visualizar animaci\u00f3n del personaje caminando (hacia izquierda y derecha) Ingresar al juego Salir del juego Avanzar al siguiente nivel Notificaci\u00f3n de nivel completado","title":"Requerimientos funcionales:"},{"location":"Descripci%C3%B3n%20individual%20de%20los%20m%C3%B3dulos/","text":"Descripci\u00f3n general y prop\u00f3sito: M\u00f3dulo Ajustes: Se encarga de administrar las variables fijas que necesita el programa. M\u00f3dulo Armas: Se encarga de cargar las im\u00e1genes del arma seg\u00fan el estado del jugador. M\u00f3dulo Debug: Se encarga de depurar el programa para saber si los comandos se est\u00e1n ejecutando correctamente, en este caso nos los muestra tanto en pantalla como en consola. M\u00f3dulo Enemigos: Controla los enemigos que esta el el mapa. Tiene una peque\u00f1a IA que hace que el monstruo persiga al jugador seg\u00fan su ubicaci\u00f3n cuando el jugador entra en un radio determinado. M\u00f3dulo Entidad: Controla las colisiones de los enemigos. M\u00f3dulo Estadisticas: Crea y dibuja la barra de estad\u00edsticas (vida y experiencia) del personaje. M\u00f3dulo Jugador: Se encarga de todo lo relacionado con el jugador, lo que es dibujarlo, procesar los estados, las animaciones, las transformaciones y su movimiento. M\u00f3dulo Magia: Tiene una funci\u00f3n similar al m\u00f3dulo arma solo que este es el encargado de cargar las im\u00e1genes del poder m\u00e1gico seg\u00fan el estado del jugador M\u00f3dulo Main: Es el encargado de correr el programa llamando a las otras clases. M\u00f3dulo Nivel: Crea el mapa especifico del nivel con los aspectos gr\u00e1ficos visuales (las im\u00e1genes del los objetos y el suelo) y los no visuales (los box de colisiones). Tambi\u00e9n Procesa los ataques del jugador para saber que debe borrar de pantalla. Tiene una clase llamada YCamaraGrupo la cual es la c\u00e1mara que sigue al jugador M\u00f3dulo Soporte: Se encarga de gestionar los CSV del mapa, objetos y colisiones. M\u00f3dulo suelo: Se encarga de procesar la imagen del suelo. Dependencias: M\u00f3dulo Armas: m\u00f3dulo pygame m\u00f3dulo Jugador M\u00f3dulo Debug: m\u00f3dulo pygame M\u00f3dulo Enemigos: m\u00f3dulo pygame m\u00f3dulo Ajustes m\u00f3dulo Entidad -> clase Entidades m\u00f3dulo Soporte M\u00f3dulo Entidad: m\u00f3dulo pygame M\u00f3dulo Estadisticas: m\u00f3dulo pygame m\u00f3dulo Ajustes M\u00f3dulo Jugador: m\u00f3dulo pygame m\u00f3dulo Ajustes m\u00f3dulo Entidad -> clase Entidades M\u00f3dulo Magia: m\u00f3dulo pygame m\u00f3dulo Jugado M\u00f3dulo Main: m\u00f3dulo pygame m\u00f3dulo sys m\u00f3dulo Nivel M\u00f3dulo Nivel: m\u00f3dulo pygame m\u00f3dulo random m\u00f3dulo Ajustes m\u00f3dulo Soporte m\u00f3dulo suelo -> clase piso m\u00f3dulo Jugador->clase Jugador m\u00f3dulo Debug->funci\u00f3n debug m\u00f3dulo Armas->clase arma m\u00f3dulo Magia->clase Magia m\u00f3dulo Estadisticas->clase stats m\u00f3dulo Enemigos->clase enemigo M\u00f3dulo Soporte: m\u00f3dulo csv->funci\u00f3n reader m\u00f3dulo os->funci\u00f3n walk M\u00f3dulo suelo: m\u00f3dulo pygame m\u00f3dulo Ajuses","title":"Descripci\u00f3n individual de los m\u00f3dulos"},{"location":"Descripci%C3%B3n%20individual%20de%20los%20m%C3%B3dulos/#descripcion-general-y-proposito","text":"M\u00f3dulo Ajustes: Se encarga de administrar las variables fijas que necesita el programa. M\u00f3dulo Armas: Se encarga de cargar las im\u00e1genes del arma seg\u00fan el estado del jugador. M\u00f3dulo Debug: Se encarga de depurar el programa para saber si los comandos se est\u00e1n ejecutando correctamente, en este caso nos los muestra tanto en pantalla como en consola. M\u00f3dulo Enemigos: Controla los enemigos que esta el el mapa. Tiene una peque\u00f1a IA que hace que el monstruo persiga al jugador seg\u00fan su ubicaci\u00f3n cuando el jugador entra en un radio determinado. M\u00f3dulo Entidad: Controla las colisiones de los enemigos. M\u00f3dulo Estadisticas: Crea y dibuja la barra de estad\u00edsticas (vida y experiencia) del personaje. M\u00f3dulo Jugador: Se encarga de todo lo relacionado con el jugador, lo que es dibujarlo, procesar los estados, las animaciones, las transformaciones y su movimiento. M\u00f3dulo Magia: Tiene una funci\u00f3n similar al m\u00f3dulo arma solo que este es el encargado de cargar las im\u00e1genes del poder m\u00e1gico seg\u00fan el estado del jugador M\u00f3dulo Main: Es el encargado de correr el programa llamando a las otras clases. M\u00f3dulo Nivel: Crea el mapa especifico del nivel con los aspectos gr\u00e1ficos visuales (las im\u00e1genes del los objetos y el suelo) y los no visuales (los box de colisiones). Tambi\u00e9n Procesa los ataques del jugador para saber que debe borrar de pantalla. Tiene una clase llamada YCamaraGrupo la cual es la c\u00e1mara que sigue al jugador M\u00f3dulo Soporte: Se encarga de gestionar los CSV del mapa, objetos y colisiones. M\u00f3dulo suelo: Se encarga de procesar la imagen del suelo.","title":"Descripci\u00f3n general y prop\u00f3sito:"},{"location":"Descripci%C3%B3n%20individual%20de%20los%20m%C3%B3dulos/#dependencias","text":"M\u00f3dulo Armas: m\u00f3dulo pygame m\u00f3dulo Jugador M\u00f3dulo Debug: m\u00f3dulo pygame M\u00f3dulo Enemigos: m\u00f3dulo pygame m\u00f3dulo Ajustes m\u00f3dulo Entidad -> clase Entidades m\u00f3dulo Soporte M\u00f3dulo Entidad: m\u00f3dulo pygame M\u00f3dulo Estadisticas: m\u00f3dulo pygame m\u00f3dulo Ajustes M\u00f3dulo Jugador: m\u00f3dulo pygame m\u00f3dulo Ajustes m\u00f3dulo Entidad -> clase Entidades M\u00f3dulo Magia: m\u00f3dulo pygame m\u00f3dulo Jugado M\u00f3dulo Main: m\u00f3dulo pygame m\u00f3dulo sys m\u00f3dulo Nivel M\u00f3dulo Nivel: m\u00f3dulo pygame m\u00f3dulo random m\u00f3dulo Ajustes m\u00f3dulo Soporte m\u00f3dulo suelo -> clase piso m\u00f3dulo Jugador->clase Jugador m\u00f3dulo Debug->funci\u00f3n debug m\u00f3dulo Armas->clase arma m\u00f3dulo Magia->clase Magia m\u00f3dulo Estadisticas->clase stats m\u00f3dulo Enemigos->clase enemigo M\u00f3dulo Soporte: m\u00f3dulo csv->funci\u00f3n reader m\u00f3dulo os->funci\u00f3n walk M\u00f3dulo suelo: m\u00f3dulo pygame m\u00f3dulo Ajuses","title":" Dependencias:   "},{"location":"Descripci%C3%B3n%20jer%C3%A1rquica/","text":"El programa se encuentra organizado por m\u00f3dulos de Python bajo el modelo POO . Por lo que agrupa una colecci\u00f3n de objetos de la misma estructura para conformar una clase, siendo as\u00ed cada objeto una instancia de su clase. Diagrama de m\u00f3dulos (UML) Imagen del UML UML_Quimbamba Codigo del UML @startuml Quimbamba Title Diagrama UML de Quimbamba class Ajustes #lightgreen;line:darkgreen{ Largo:int Ancho:int FPS:int TILESIZE:int alturavida:int anchovida:int anchobarraenergia:int tama\u00f1ocorazon:int ubicacion:str tama\u00f1ofuente:int WORLD_MAP:str } class Armas #lightgreen;line:darkgreen{ jugador:int image:str grupos:float } class Debug #lightgreen;line:darkgreen{ font:str debug(info,y:int,x:int) } class Enemigos #lightgreen;line:darkgreen{ nombremoustro: pos:float grupos:float obstaculos:str estado:int image:str rect:int hitbox:int nombremoustro:str moustroinfo:str vida:int xp:int velocidad:int da\u00f1o:int resistencia:int radioataque:int deteccion:int tipo:int puedeatacar:Boolean tiempoataque:int esperaataque:int importargraficos(name:str) get_player_distance_direction(player) tomarestado(jugador:int) acciones(jugador:int) animacion() esperaataques() update() actualizacionenemigos(jugador:int) } class Entidad #lightgreen;line:darkgreen{ grupos:float framesi:int animacionv:float direccion:int move(velovidad:int) colision(direccion:int) } class Estadisticas #lightgreen;line:darkgreen{ mostrars:str font:(str,int) tama\u00f1obarravida:int tama\u00f1obarraenergia:int mostrarbarra(actual:int, maximo:int, cuadrotrasero:int, color:str) mostrarexperiencia(xp:int) display(jugador:int) } class Magia #lightgreen;line:darkgreen{ jugador:int grupos:float image:str } class Jugador #lightgreen;line:darkgreen{ pos:float grupos:float obstaculos:str image:str rect:int hitbox:int estado:int animaciondent:int velocidadanimacion:float direccion:int velocidad:int ataque: boolean ataqueesp:int sw:int atacar:str magia:str estadisticas:int vida:float energia:float xp:int velocidad:int animaciones() input() estados() move(velocidad:int) espera() secuencia() colicion(direccion:int ) update() } class Main #lightgreen;line:darkgreen{ pantalla:str frames:float run() } class Nivel #lightgreen;line:darkgreen{ mostrars:str spritev:str obstaculos: str ataqueactual:int spritesataque:str spritesataqueenemigos:str stats:int crearmapa() atacar() magia() logicaataquesp() run() } class YCamaraGrupo #lightgreen;line:darkgreen{ mostrars:int mitadancho:int mitadlargo:int offset:int suelo_superficie: str suelo_rect:int custom_draw(jugador:int) actualizacionenemigo(jugdor:int) } class Soporte #lightgreen;line:darkgreen{ import_csv_layout(path:str) import_folder(path:str) } class Suelo #lightgreen;line:darkgreen{ pos:int grupos:float sprite_type:str surface:str image:int } Ajustes \" 1 \" < --* \" 1 \" Main Nivel--* \" 1 \"Main Debug \" * \"-- \" 1 \"Main Jugador \" * \" --> \" 1 \" Ajustes Jugador \" * \" *-- \" * \"Soporte Magia\" * \"--* \" * \"Jugador Armas\" * \"--* \" * \"Jugador Enemigos \" * \"--> \" 1 \"Ajustes Enemigos \" * \" *-- \" * \" Soporte Enemigos \" * \" *-- \" * \" Entidad Nivel \" * \"--> \" 1 \"Ajustes Nivel \" * \"--* \" * \"Jugador Nivel \" * \"-- \" * \"Debug Nivel \" * \"-- \" * \" Estadisticas Nivel \" * \"-- \" * \"Magia Nivel \" * \"-- \" * \"Enemigos Nivel \" * \"*-- \" * \"Suelo Nivel \" * \" *-- \" * \" Soporte Nivel \" * \" *-- YCamaraGrupo: compone Suelo \" * \" *--> \" 1 \" Ajustes *[POO]: Programaci\u00f3n Orientada a Objeto *[UML]: Lenguaje Unificado de Modelado","title":"Descripci\u00f3n jer\u00e1rquica"},{"location":"Descripci%C3%B3n%20jer%C3%A1rquica/#diagrama-de-modulos-uml","text":"","title":"Diagrama de m\u00f3dulos (UML)"},{"location":"Descripci%C3%B3n%20jer%C3%A1rquica/#imagen-del-uml","text":"UML_Quimbamba","title":"Imagen del UML"},{"location":"Descripci%C3%B3n%20jer%C3%A1rquica/#codigo-del-uml","text":"@startuml Quimbamba Title Diagrama UML de Quimbamba class Ajustes #lightgreen;line:darkgreen{ Largo:int Ancho:int FPS:int TILESIZE:int alturavida:int anchovida:int anchobarraenergia:int tama\u00f1ocorazon:int ubicacion:str tama\u00f1ofuente:int WORLD_MAP:str } class Armas #lightgreen;line:darkgreen{ jugador:int image:str grupos:float } class Debug #lightgreen;line:darkgreen{ font:str debug(info,y:int,x:int) } class Enemigos #lightgreen;line:darkgreen{ nombremoustro: pos:float grupos:float obstaculos:str estado:int image:str rect:int hitbox:int nombremoustro:str moustroinfo:str vida:int xp:int velocidad:int da\u00f1o:int resistencia:int radioataque:int deteccion:int tipo:int puedeatacar:Boolean tiempoataque:int esperaataque:int importargraficos(name:str) get_player_distance_direction(player) tomarestado(jugador:int) acciones(jugador:int) animacion() esperaataques() update() actualizacionenemigos(jugador:int) } class Entidad #lightgreen;line:darkgreen{ grupos:float framesi:int animacionv:float direccion:int move(velovidad:int) colision(direccion:int) } class Estadisticas #lightgreen;line:darkgreen{ mostrars:str font:(str,int) tama\u00f1obarravida:int tama\u00f1obarraenergia:int mostrarbarra(actual:int, maximo:int, cuadrotrasero:int, color:str) mostrarexperiencia(xp:int) display(jugador:int) } class Magia #lightgreen;line:darkgreen{ jugador:int grupos:float image:str } class Jugador #lightgreen;line:darkgreen{ pos:float grupos:float obstaculos:str image:str rect:int hitbox:int estado:int animaciondent:int velocidadanimacion:float direccion:int velocidad:int ataque: boolean ataqueesp:int sw:int atacar:str magia:str estadisticas:int vida:float energia:float xp:int velocidad:int animaciones() input() estados() move(velocidad:int) espera() secuencia() colicion(direccion:int ) update() } class Main #lightgreen;line:darkgreen{ pantalla:str frames:float run() } class Nivel #lightgreen;line:darkgreen{ mostrars:str spritev:str obstaculos: str ataqueactual:int spritesataque:str spritesataqueenemigos:str stats:int crearmapa() atacar() magia() logicaataquesp() run() } class YCamaraGrupo #lightgreen;line:darkgreen{ mostrars:int mitadancho:int mitadlargo:int offset:int suelo_superficie: str suelo_rect:int custom_draw(jugador:int) actualizacionenemigo(jugdor:int) } class Soporte #lightgreen;line:darkgreen{ import_csv_layout(path:str) import_folder(path:str) } class Suelo #lightgreen;line:darkgreen{ pos:int grupos:float sprite_type:str surface:str image:int } Ajustes \" 1 \" < --* \" 1 \" Main Nivel--* \" 1 \"Main Debug \" * \"-- \" 1 \"Main Jugador \" * \" --> \" 1 \" Ajustes Jugador \" * \" *-- \" * \"Soporte Magia\" * \"--* \" * \"Jugador Armas\" * \"--* \" * \"Jugador Enemigos \" * \"--> \" 1 \"Ajustes Enemigos \" * \" *-- \" * \" Soporte Enemigos \" * \" *-- \" * \" Entidad Nivel \" * \"--> \" 1 \"Ajustes Nivel \" * \"--* \" * \"Jugador Nivel \" * \"-- \" * \"Debug Nivel \" * \"-- \" * \" Estadisticas Nivel \" * \"-- \" * \"Magia Nivel \" * \"-- \" * \"Enemigos Nivel \" * \"*-- \" * \"Suelo Nivel \" * \" *-- \" * \" Soporte Nivel \" * \" *-- YCamaraGrupo: compone Suelo \" * \" *--> \" 1 \" Ajustes *[POO]: Programaci\u00f3n Orientada a Objeto *[UML]: Lenguaje Unificado de Modelado","title":" Codigo del UML "},{"location":"Procedimientos/","text":"Procedimientos de desarrollo: Herramientas utilizadas: Para la creaci\u00f3n del programa se utiliz\u00f3 una variedad de herramientas, las cuales son: Visual Studio Code: Un editor de c\u00f3digo, en donde se escribi\u00f3 todo el c\u00f3digo del programa. Tiled: Es un editor de mapas con en cual se dise\u00f1\u00f3 el mapa del juego. Craftpix.net: Pagina que dispone recursos gr\u00e1ficos premiums y de libre uso. Aseprite: Es un editor de gr\u00e1ficos rasterizados, con el cual se dise\u00f1aron los sprites del juego; como los personajes, enemigos y otros. Adobe Illustrator: Es un editor de gr\u00e1ficos vectoriales con el cual se editaron los sprites del juego. Planificaci\u00f3n: El proceso de codificaci\u00f3n del programa bastante educativo, ya que nos oblig\u00f3 a ir m\u00e1s all\u00e1 de nuestros conocimientos previos. No est\u00e1 de m\u00e1s decir que no se sabia por donde empezar y al hacerlo hab\u00edan muchos errores que no se sab\u00edan solucionar. Tambi\u00e9n se tuvo que aprender ha hacer una c\u00e1mara, una inteligencia artificial y a manjar el m\u00f3dulo de Python pymage. Procedimientos de instalaci\u00f3n y prueba: Requisitos no funcionales: Buen rendimiento Cero bugs Especificaciones de prueba y ejecuci\u00f3n: Para este proyecto no se crear\u00e1 ejecutable por lo que el programa correr\u00e1 directamente del editor de c\u00f3digo VSC. EL interprete ser\u00e1 el lenguaje de programaci\u00f3n Python v3.10.7 *[VSC]: Visual Studio Code","title":"Procedimientos"},{"location":"Procedimientos/#procedimientos-de-desarrollo","text":"","title":"Procedimientos de desarrollo:"},{"location":"Procedimientos/#herramientas-utilizadas-para-la-creacion-del-programa-se-utilizo-una-variedad-de-herramientas-las-cuales-son","text":"Visual Studio Code: Un editor de c\u00f3digo, en donde se escribi\u00f3 todo el c\u00f3digo del programa. Tiled: Es un editor de mapas con en cual se dise\u00f1\u00f3 el mapa del juego. Craftpix.net: Pagina que dispone recursos gr\u00e1ficos premiums y de libre uso. Aseprite: Es un editor de gr\u00e1ficos rasterizados, con el cual se dise\u00f1aron los sprites del juego; como los personajes, enemigos y otros. Adobe Illustrator: Es un editor de gr\u00e1ficos vectoriales con el cual se editaron los sprites del juego.","title":"Herramientas utilizadas: Para la creaci\u00f3n del programa se utiliz\u00f3 una variedad de herramientas, las cuales son:"},{"location":"Procedimientos/#planificacion","text":"El proceso de codificaci\u00f3n del programa bastante educativo, ya que nos oblig\u00f3 a ir m\u00e1s all\u00e1 de nuestros conocimientos previos. No est\u00e1 de m\u00e1s decir que no se sabia por donde empezar y al hacerlo hab\u00edan muchos errores que no se sab\u00edan solucionar. Tambi\u00e9n se tuvo que aprender ha hacer una c\u00e1mara, una inteligencia artificial y a manjar el m\u00f3dulo de Python pymage.","title":"Planificaci\u00f3n:"},{"location":"Procedimientos/#procedimientos-de-instalacion-y-prueba","text":"","title":"Procedimientos de instalaci\u00f3n y prueba:"},{"location":"Procedimientos/#requisitos-no-funcionales","text":"Buen rendimiento Cero bugs","title":"Requisitos no funcionales:"},{"location":"Procedimientos/#especificaciones-de-prueba-y-ejecucion","text":"Para este proyecto no se crear\u00e1 ejecutable por lo que el programa correr\u00e1 directamente del editor de c\u00f3digo VSC. EL interprete ser\u00e1 el lenguaje de programaci\u00f3n Python v3.10.7 *[VSC]: Visual Studio Code","title":"Especificaciones de prueba y ejecuci\u00f3n:"}]}